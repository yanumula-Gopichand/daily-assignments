Operators:
Operators are used to perform operations on variables and values.
Various operators supported by Python are:
1.Arithmetic operators
2.Comparision operators
3.Logical operators
4.Assignment operators
5.Identity operators
6.Membership operators
7.Bitwise operators
 
1.Arithmetic operators: for performing Arithmetic operations.
Various Arithmetic operators are:
1.Addition(+) :- adds two operands.
2.Subtraction(-) :- subtracts two operands.
3.Multiplication(*) :- multiplies two operands.
4.Division(/) :- divides the first operand by the second.
5.Floor Division(//) :- divides the first operand by the second.
6.Modulo Division(%) :- returns the remainder when the first operand is divided by the second.
7.Exponent(**) :- Returns first raised to power second.
 
 
2.Comparision operators:- Comparison operators are used to compare two values. Comparison operators always returns either True/False
== :- True if both operands are equal.
!= :- True if operands are not equal.
>= :- Greater than or equal to True if the left operand is greater than or equal to the right.
<= :- Less than or equal to True if the left operand is less than or equal to the right.
> :- True if the left operand is greater than the right.
< :- True if the left operand is less than the right.
 
 
3.Logical operators:- Logical operators are used to combine conditional statements.
AND :- True if both the operands are true.
OR :- True if either of the operands is true.
NOT :- True if the operand is false.
 
 
4.Assignment operators:- Assignment operators are used to assign values to variables. Assignment operators are also called as short-hand operators.
= :- Assign the value of the right side of the expression to the left side operand.
+= :- Add right-side operand with left-side operand and then assign to left operand.
-= :- Subtract right operand from left operand and then assign to left operand.
*= :- Multiply right operand with left operand and then assign to left operand.
/= :- Divide left operand with right operand and then assign to left operand.
%= :- Takes modulus using left and right operands and assign the result to left operand.
//= :- Divide left operand with right operand and then assign the value(floor) to left operand.
**= :- Calculate exponent(raise power) value using operands and assign value to left operand.
&= :- AND on operands and assign value to left operand.
|= :- OR on operands and assign value to left operand.
^= :- XOR on operands and assign value to left operand.
>>= :- Performs Bitwise right shift on operands and assign value to left operand.
<<= :- Performs Bitwise left shift on operands and assign value to left operand.
 
 
5.Identity operators :- These operators are used to compare the addresses of 2 objects.
Identity operators are,
  Is :- Returns True if both variables are the same object.
  is not :- Returns True if both variables are not the same object.
 
6.Membership operators:- These operators are used to check whether an element is present or not.
Membership operators are:
  In :- Returns True if a sequence with the specified value is present in the object.
  not in :- Returns True if a sequence with the specified value is not present in the object
 
 
7.Bitwise operators:- Bitwise operators are used to compare (binary) numbers.
AND (&) :- Sets each bit to 1 if both bits are 1.
OR ( | ) :- Sets each bit to 1 if one of two bits is 1.
XOR( ^ ) :- Sets each bit to 1 if only one of two bits is 1.
NOT ( ~ ) :- Inverts all the bits.
LIFT SHIFT ( << ) :- Shift left by pushing zeros in from the right and let the leftmost bits fall off.
RIGHT SHIFT ( >> ) :- Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost 
bits fall off.
has context menu